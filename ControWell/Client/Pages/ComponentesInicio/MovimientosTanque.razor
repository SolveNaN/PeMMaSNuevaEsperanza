@inject HttpClient Http
@inject SweetAlertService Swal
<div @onmousemove=ActualizarDatos>
    <table class="table table-success table-striped">
        <thead>
            <tr>

                <th scope="col">Fecha</th>
                <th scope="col">Tanque</th>
                <th scope="col">Tipo mov</th>
                <th scope="col">TOV</th>
                <th scope="col">NSV</th>
                <th scope="col">AGUA</th>
                <th scope="col">DELTA</th>
                <th scope="col">CTL</th>
                <th scope="col">Eliminar</th>
                <th scope="col">Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in Listado)
            {
                if (Listado.Count() > 0 && tanque.Id == i.TanqueId)
                {
                    <tr>
                        <td>@i.Fecha</td>
                        <td>@i.Tanque.NombreTanque</td>
                        <td>@i.TipoMovimiento</td>
                        <td>@i.Tov</td>
                        <td>@i.NSV()</td>
                        <td>@i.AGUANETA()</td>
                        <td>@i.DeltaNsv</td>
                        <td>@i.CTL()</td>

                        @*INICIO BOTONES*@
                        <td>
                            <button type="button" class="btn btn-primary">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                        </td>
                        <td>
                            <button type="button" class="btn btn-warning">
                                <i class="bi bi-trash3-fill"></i>
                            </button>
                        </td>
                        @*FINAL BOTONES*@
                    </tr>
                }                
            }
        </tbody>
    </table>

</div>


@code{
    [Parameter]
    public Tanque? tanque { get; set; }
   
    protected string ActionDescription = "Car Button Clicked!";
    Boolean update = false;
    Boolean state = false;
    int id;
    public static List<Balance> Listado = new List<Balance>();
    Consulta consulta = new Consulta();

    async Task ActualizarDatos()
    {
        var resultado = await Http.PostAsJsonAsync("api/Balance/Rango", consulta);
        if (resultado != null)
            Listado = await resultado.Content.ReadFromJsonAsync<List<Balance>>();
    }
    protected override Task OnInitializedAsync()
    {
        ActualizarDatos();
        return base.OnInitializedAsync();
    }
    
    void updatedatarow(int _id)
    {
        update = true;
        id = _id;
    }
    void Cancelar()
    {
        state = false;
        update = false;
    }
    async Task DeleteBalance(int _id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar",
                Text = "¿ Estas seguro que deseas eliminar ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            
        }
    }
    async Task UpdateBalance(Balance balance)
    {
        
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Actualizado correctamente",
                Icon = SweetAlertIcon.Success,
            });

        var resul = await Http.GetFromJsonAsync<List<Balance>>($"api/Balance/Tanque/{tanque.Id}");
        if (resul != null)
            Listado = resul;
    }
}
