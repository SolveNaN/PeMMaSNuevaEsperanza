@page "/Rutas"
@using ControWell.Shared
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

<table class="table table-success table-striped">
    <thead>
        <tr>
            @* <th>Id</th>*@
            <th>Nombre</th>
            <th>Codigo</th>
            <th>Horas Vigencia</th>
            <th></th>

        </tr>
    </thead>
    <tbody>
        @foreach (var Ruta in Rutas)
        {

            <tr>
                @*<td>@Pozo.Id</td>*@
                @if (update == true && Ruta.Id == id)
                {
                    <td><input @bind-value="@Ruta.Nombre" /></td>
                }
                else
                {
                    <td>@Ruta.Nombre</td>
                }
                @if (update == true && Ruta.Id == id)
                {
                    <td><input @bind-value="@Ruta.Codigo" /></td>
                }
                else
                {
                    <td>@Ruta.Codigo</td>
                }
                @if (update == true && Ruta.Id == id)
                {
                    <td><input @bind-value="@Ruta.VigenciaHoras" /></td>
                }
                else
                {
                    <td>@Ruta.VigenciaHoras</td>
                }

                <td>
                    @if (update == true && Ruta.Id == id)
                    {
                        <button type="submit" class="btn btn-info" data-toggle="tooltip" title="Save" @onclick="(()=>UpdateRuta(Ruta))">
                            <i class="fa-solid fa-circle-check"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="Cancelar" data-toggle="tooltip" title="Cancel">
                            <i class="fa-solid fa-ban"></i>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" data-toggle="tooltip" title="Update" @onclick="(()=> updatedatarow(Ruta.Id))"><i class="oi oi-pencil"></i></button>
                        <button class="btn btn-warning" data-toggle="tooltip" title="Delete" @onclick="(()=>  DeleteRuta(Ruta.Id))"><i class="oi oi-trash"></i></button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>



<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#ModalCrearRuta">
    Nueva Ruta
</button>

<!-- Modal -->
<div class="modal fade" id="ModalCrearRuta" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <section id="contact" class="contact" style="background: rgb(34,195,158);
background: linear-gradient(225deg, rgba(34,195,158,1) 0%, rgba(87,102,130,1) 100%);border-radius:5px">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-12" data-aos="fade-up" data-aos-delay="100">

                            <div class="php-email-form mt-4">
                                <div class="modal-body">
                                    <EditForm Model="MiRuta" OnSubmit="EviarRuta">                                        
                                        <div>
                                            <label for="nombre">Nombre Ruta</label>
                                            <InputText id="nombre" @bind-Value="MiRuta.Nombre" class="form-control"></InputText>
                                        </div>
                                        <div>
                                            <label for="nombre">Codigo</label>
                                            <InputText id="nombre" @bind-Value="MiRuta.Codigo" class="form-control"></InputText>
                                        </div>
                                        <div>
                                            <label for="lastname">Horas vigencia</label>
                                            <InputNumber id="lastname" @bind-Value="MiRuta.VigenciaHoras" class="form-control"></InputNumber>
                                        </div>

                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Guardar</button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </section><!-- End Contact Section -->
        </div>
    </div>
</div>

@code {

    Boolean state = false;
    Boolean update = false;
    int id;
    Boolean PozosState = false;
    Boolean vertabla = false;
    string NombreRuta = "";
    Boolean EstadoTablaNivelesPorRuta = false;
    public static List<Ruta> Rutas = new List<Ruta>();

    bool veraqui { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var resultado = await Http.GetFromJsonAsync<List<Ruta>>("api/Ruta");
        if (resultado != null)
            Rutas = resultado;
    }


    Ruta Ruta = new Ruta();
    Ruta MiRuta = new Ruta();


    async Task EviarRuta()
    {
        try
        {
            MiRuta.Estado = "1";
            await Http.PostAsJsonAsync("api/Ruta", MiRuta);
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Guardado correctamente",
                    Icon = SweetAlertIcon.Success,
                });
        }
        catch (InvalidCastException e)
        {
            Console.WriteLine(e);

            state = false;
            await Actualizar();
        }
        finally
        {
            state = false;
            await Actualizar();
        }
    }

    async Task DeleteRuta(int _id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar",
                Text = "¿ Estas seguro que deseas eliminar ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (!confirmado)
        {
            //context.PreventNavigation();
        }
        else
        {
            await Http.DeleteAsync($"api/Ruta{_id}");
            await Actualizar();
        }

    }

    async Task UpdateRuta(Ruta Ruta)
    {
        await Http.PutAsJsonAsync($"api/Ruta{Ruta.Id}", Ruta);
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Actualizado correctamente",
                Icon = SweetAlertIcon.Success,
            });

        await Actualizar();
    }

    void updatedatarow(int _id)
    {
        update = true;
        id = _id;
    }

    void Cancelar()
    {
        state = false;
        update = false;

    }

    async Task Actualizar()
    {
        var resultado = await Http.GetFromJsonAsync<List<Ruta>>("api/Ruta");
        if (resultado != null)
            Rutas = resultado;
    }
}