@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject SweetAlertService Swal
@inject HttpClient Http

<PageTitle>PeMMaS DashBoard</PageTitle>
<ControWell.Client.Pages.ComponentesInicio.Consolidados />
<Tabs>
    <Tab Title="Tanques Crudo" IsActive="true">
        <Content>
            <div style="height:300px;overflow-y: scroll">                
              <ControWell.Client.Pages.ComponentesInicio.TanquesCrudo />
            </div>            
        </Content>
    </Tab>
    <Tab Title="Tanques Nafta">
        <Content>
            <div style="height:300px;overflow-y: scroll">                
               <ControWell.Client.Pages.ComponentesInicio.TanquesNafta />
            </div>
            
        </Content>
    </Tab>
    <Tab Title="Indicadores">
        <Content>
            <div style="height:700px;overflow-y: scroll">
                <ControWell.Client.Pages.ComponentesInicio.Indicadores />
            </div>
            
        </Content>
    </Tab>
    <Tab Title="Grafica">
        <Content>
            <ControWell.Client.Pages.ComponentesInicio.Grafica />

            
        </Content>
    </Tab>
    <Tab Title="Informes">
        <Content>
            <div style="height:700px;overflow-y: scroll">
                <div style="width:100%">
                    <ControWell.Client.Pages.ComponentesInicio.Documentos />
                </div>
            </div>
        </Content>
    </Tab>
    <Tab Title="Movimientos">
        <Content>
            <div style="height:700px;overflow:auto">
                <div style="width:100%">
                    <ControWell.Client.Pages.ComponentesInicio.TablaGeneral />
                </div>
            </div>
        </Content>
    </Tab>
</Tabs>


@code {
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    {
        var toastMessage = new ToastMessage();
        toastMessage.Type = toastType;
        toastMessage.Title = "Blazor Bootstrap";
        toastMessage.HelpText = $"{DateTime.Now}";
        toastMessage.Message = $"Hello, world! This is a toast message. DateTime: {DateTime.Now}";
        // disable auto hide for `danger` and `warning` messages.
        toastMessage.AutoHide = !(toastType == ToastType.Danger || toastType == ToastType.Warning);

        return toastMessage;
    }

    // Using of the interface IList is important for the event callback!


    private HubConnection? hubConnection;
    private List<string> messagesSig = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messagesSig.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    async Task Alerta()
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Position="center",
                Title = "Guardado Correctamente",                                
                Icon = SweetAlertIcon.Success,
                ShowCancelButton= false,
                Timer=1500
            });
    }  
}
